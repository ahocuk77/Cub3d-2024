
#ifndef COMMON_H
# define COMMON_H

# include "../lib/libft/libft.h"
# include "../lib/MLX42/include/MLX42/MLX42.h"

# include <stdbool.h>
# include <math.h>
# include <fcntl.h>

# include <sys/time.h>

# define WIN_W					360
# define WIN_H					200

# ifndef PI
#  define PI 3.141592
# endif

# ifndef FOV
#  define FOV 1.0471975512f
# endif

# ifndef ANGLE_STEP
#  define ANGLE_STEP		0.003f
# endif

# ifndef LINEAR_STEP_SIDE
#  define LINEAR_STEP_SIDE		0.02f
# endif

# ifndef LINEAR_STEP_FORW
#  define LINEAR_STEP_FORW		0.06f
# endif




/////////////////////////// TEXTURES ///////////////////////////


typedef enum e_direction
{
	NO,
	SO,
	WE,
	EA,
}	t_direction;

typedef struct s_wall
{
	mlx_texture_t	texture[4];
	xpm_t			*xpm[4];
	int				texture_num[4];
	char			*path[4];
	int				path_num;
	int				texture_check;

	float			txt_w;
	int				txt_idx;

	// t_img			txt[4];

}	t_wall;


/////////////////////////// COLORS ///////////////////////////


typedef struct s_rgb
{
	int	r;
	int	g;
	int	b;
}	t_rgb;

typedef struct s_color
{
	t_rgb				floor; // meder uses
	t_rgb				ceiling; // meder uses
	int					color_num;
	int					f_color_num;
	int					c_color_num;
	int					total_color_num;
	char				*color_numb[3];
	int					color_check;
}	t_color;


///////////////////////////    MAP    ///////////////////////////


typedef struct s_map
{
	char	**map; // meder uses
	int		height; // meder uses
	int		width; // meder uses
	char	player; // player's direction - meder uses
	int		size;
	int		len_width;
	int		len_height;
	int		map_check;
	bool	new_line_checker;
}	t_map;


/////////////////////////// PLAYER DATA ///////////////////////////


typedef struct s_player
{
	float	pos_x;
	float	pos_y;
	float	view_angle;
}	t_player;


/////////////////////////// GAME DATA ///////////////////////////


typedef struct s_game
{
	mlx_t				*mlx;
	mlx_image_t			*img;
	t_wall				wall;
	t_color				color;
	t_map				map;
	t_player			player;
}	t_game;

typedef struct s_draw
{
	int		line_height;
	int		start;
	int		end;
	int		text_x;
	double	text_y;
	double	wall_x;
	double	text_step;
}	t_draw;

typedef struct s_ray
{
	float	dx;
	float	dy;
	int		sx;
	int		sy;
	float	hor_x;
	float	hor_y;
	float	vert_x;
	float	vert_y;
	float	vert_dist;
	float	hor_dist;
	float	vert_w;
	float	hor_w;
}	t_ray;

#endif


void	ft_ray_initial_calculations(t_game *game, t_ray *r, float v)
{
	r->dx = cos(v);
	r->dy = -sin(v);
	r->sx = ft_sign(r->dx);
	r->sy = ft_sign(r->dy);
	r->vert_x = (int) game->player.pos_x;
	if (r->sx > 0)
		r->vert_x += 1.0f;
	r->hor_y = (int) game->player.pos_y;
	if (r->sy > 0)
		r->hor_y += 1.0f;
}

void	ft_ray_next_step_calculation(t_game *game, t_ray *r)
{
	if (r->sx != 0)
	{
		r->vert_y = game->player.pos_y + r->dy / r->dx * (r->vert_x - game->player.pos_x);
		r->vert_dist = sqrt(pow(game->player.pos_x - r->vert_x, 2.0)
				+ pow(game->player.pos_y - r->vert_y, 2.0));
		r->vert_w = r->vert_y - (int) r->vert_y;
		if (r->sx > 0)
			r->vert_w = 1 - r->vert_w;
	}
	else
		r->vert_dist = INFINITY;
	if (r->sy != 0)
	{
		r->hor_x = game->player.pos_x + r->dx / r->dy * (r->hor_y - game->player.pos_y);
		r->hor_dist = sqrt(pow(game->player.pos_x - r->hor_x, 2.0)
				+ pow(game->player.pos_y - r->hor_y, 2.0));
		r->hor_w = r->hor_x - (int) r->hor_x;
		if (r->sy < 0)
			r->hor_w = 1 - r->hor_w;
	}
	else
		r->hor_dist = INFINITY;
}

float	ft_save_color(t_game *game, float dist, int color_idx, float w)
{
	(void)w;
	game->wall.txt_idx = color_idx;
	if (game->wall.txt_idx == 0)
		printf("direction: NO, %d\n", NO);
	else if (game->wall.txt_idx == 1)
		printf("direction: SO, %d\n", SO);
	else if (game->wall.txt_idx == 2)
		printf("direction: WE, %d\n", WE);
	else if (game->wall.txt_idx == 3)
		printf("direction: EA, %d\n", EA);
	game->wall.txt_w = w;
	return (dist);
}

float	cast_ray(t_game *game, float v)
{
	t_ray	r;

	ft_ray_initial_calculations(game, &r, v);
	while (1)
	{
		ft_ray_next_step_calculation(game, &r);
		if (r.vert_dist < r.hor_dist)
		{
			if (game->map.map[(int)r.vert_y][(int)r.vert_x + (r.sx - 1) / 2] == '1')
				return (ft_save_color(game, r.vert_dist, r.sx + 1, r.vert_w));
				// here u indicate which wall is hit
				// return (r.vert_dist);
			else
				r.vert_x += r.sx;
		}
		else
		{
			if (game->map.map[(int)r.hor_y + (r.sy - 1) / 2][(int)r.hor_x] == '1')
				return (ft_save_color(game, r.hor_dist, r.sy + 2, r.hor_w));
				// here u indicate which wall is hit
				// return (r.hor_dist);
			else
				r.hor_y += r.sy;
		}
	}
}

void	draw_background(t_game *game)
{
	int			x;
	int			y;
	int			color;

	color = rgba_to_color(game->color.ceiling.r, game->color.ceiling.g, \
							game->color.ceiling.b, 255);
	y = 0;
	while (y < WIN_H / 2)
	{
		x = 0;
		while (x < WIN_W)
			mlx_put_pixel(game->img, x++, y, color);
		y++;
	}
	color = rgba_to_color(game->color.floor.r, game->color.floor.g, \
							game->color.floor.b, 255);
	while (y < WIN_H)
	{
		x = 0;
		while (x < WIN_W)
			mlx_put_pixel(game->img, x++, y, color);
		y++;
	}
}


void	draw_line(t_game *game, int col, float dist)
{
	t_draw			draw;
	unsigned int	color;
	int				h;

	draw.line_height = (int)(WIN_H / dist);
	draw.start = (WIN_H / 2) - (draw.line_height / 2);
	draw.end = (draw.line_height / 2) + (WIN_H / 2);

	if (game->wall.txt_idx == 0)
		color = rgba_to_color(235, 233, 20, 255);
	else if (game->wall.txt_idx == 1)
		color = rgba_to_color(93, 106, 235, 255);
	else if (game->wall.txt_idx == 2)
		color = rgba_to_color(209, 255, 194, 255);
	else if (game->wall.txt_idx == 3)
		color = rgba_to_color(234, 56, 56, 255);
	h = 0;
	while (h < WIN_H)
	{
		if (h >= draw.start && h <= draw.end)
			mlx_put_pixel(game->img, col, h, color);
		h++;
	}
}

void	draw_lines(t_game *game)
{
	float	v;
	float	dv;
	int		x;
	float	dist;
	int		draw_line_call_count;

	v = game->player.view_angle + FOV / 2;
	dv = FOV / (WIN_W - 1);
	x = -1;
	draw_line_call_count = 0;
	while (++x < WIN_W)
	{
		// here u pull the pixels from the textures
		dist = cast_ray(game, v) * cos(game->player.view_angle - v);
		draw_line(game, x, dist);
		draw_line_call_count++;
		printf("draw_line_call: %d\n", draw_line_call_count);
		v -= dv;
	}
}




void	render(t_game *game)
{
	draw_background(game);
	draw_lines(game);
}




xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
111111111111111111111111111111
111111111111111111111111000011
111111111111111111111111000011
111111111111111111111111000011
100000100000000011111111000011
100010001001100011111111000011
11111111100010001111111100001111111111111
101010000000000000000000000000000000000011
100000000101100011111111000000000000100011
101010000100100011111111000000N00011100011
111011111111100011111111000000000000100011
100000000000000011111111111111111111100011
100000001000000011111111111111111111100011
111111111111111111111111111111111111100011
111111111111111111111111111111111111100011
111111111111111111111111111000000000000011
111111111111111111111111111111111111000011
                                   111111
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

